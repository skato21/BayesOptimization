program StriplineHER

%%#include <stdio.h>
%%#include <stdlib.h>
%%#include <assert.h>
%%#include <time.h>
%%#include <math.h>
%%#include <unistd.h>
%%#include "MT.h"

double X0, X1, X2, X3, Y;
/*--- HER (D8) ---*/
assign X0 to "TEST:X0";
assign X1 to "TEST:X1";
assign Y  to "TEST:Y";

monitor X0;
monitor X1;

%{
  double x0;
  double x1;
  double y;

  double Uniform(void)
  {
    return genrand_real3();
  }

  double rand_Lnormal(double mu, double sigma)
  {
    double y= mu + sigma*sqrt(-2.0*log(Uniform()))*sin(2.0*M_PI*Uniform());//gauss random number
    return y;
  }
}%

ss her_stripline {

  /*--- Initialization ---*/
  state init {
    when ()
    {
      pvGet(X0);
      pvGet(X1);

      printf("StriplineHER initialization done.\n");

      %{
        init_genrand((unsigned)time(NULL));
      }%
    }
    state fit
  }

  /*--- Fit ---*/
  state fit {
    when ()
    {
      x0 = X0;
      x1 = X1;

      %{
	y = pow(X1 - 5.1/(4.*pow(M_PI,2.)) * pow(X0,2.) + 5./M_PI * X0 - 6., 2.) + 10 * (1. - 1./(8.*M_PI)) * cos(X0) + 10. 
  + rand_Lnormal(0., 1.e-3);
	
      }%

      Y = y;
      pvPut(Y);

      %{
        usleep(0.1e+6);
      }%
    }
    state fit
  }
}

//program StriplineHER
//
//%%#include <stdio.h>
//%%#include <stdlib.h>
//%%#include <assert.h>
//%%#include <time.h>
//%%#include <math.h>
//%%#include <unistd.h>
//%%#include "MT.h"
//
//double TESTX, TESTY, TESTZ;
///*--- HER (D8) ---*/
//assign X0 to "TEST:X0";
//assign X1 to "TEST:X1";
//assign Y to "TEST:Y";
//
//monitor X0;
//monitor X1;
//
//%{
//  double testx;
//  double testy;
//  double testz;
//
//  double Uniform(void)
//  {
//    return genrand_real3();
//  }
//
//  double rand_Lnormal(double mu, double sigma)
//  {
//    double z= mu + sigma*sqrt(-2.0*log(Uniform()))*sin(2.0*M_PI*Uniform());//gauss random number
//    return exp(z);
//  }
//}%
//
//ss her_stripline {
//
//  /*--- Initialization ---*/
//  state init {
//    when ()
//    {
//      pvGet(TEST:X0);
//      pvGet(TEST:X1);
//
//      printf("StriplineHER initialization done.\n");
//
//      %{
//        init_genrand((unsigned)time(NULL));
//      }%
//    }
//    state fit
//  }
//
//  /*--- Fit ---*/
//  state fit {
//    when ()
//    {
//      testx = X0;
//      testy = X1;
//
//      %{
//	testz = pow(testy - 5.1/(4.*pow(M_PI,2.)) * pow(testx,2.) + 5./M_PI * testx - 6., 2.) + 10 * (1. - 1./(8.*M_PI)) * cos(testx) + 10. + rand_Lnormal(0., 1.e-3);
//	//testz = pow(testy - 5.1/(4.*pow(M_PI,2.)) * pow(testx,2.) + 5./M_PI * testx - 6., 2.) + 10 * (1. - 1./(8.*M_PI)) * cos(testx) + 10.;
//      }%
//
//      Y = testz;
//      pvPut(Y);
//
//      %{
//        usleep(0.1e+6);
//      }%
//    }
//    state fit
//  }
//}
//
//