program StriplineHER

%%#include <stdio.h>
%%#include <stdlib.h>
%%#include <assert.h>
%%#include <time.h>
%%#include <math.h>
%%#include <unistd.h>
%%#include "MT.h"

double X0, X1, Y0, C0, G0;
/*--- HER (D8) ---*/
assign X0 to "TEST:X0";
assign X1 to "TEST:X1";
assign Y0 to "TEST:Y0";
assign C0 to "TEST:C0";
assign G0 to "TEST:G0";

monitor X0;
monitor X1;
monitor C0;
monitor G0;

%{
  double x0;
  double x1;
  double y;

  double Uniform(void)
  {
    return genrand_real3();
  }

  double rand_Lnormal(double mu, double sigma)
  {
    double y = mu + sigma*sqrt(-2.0*log(Uniform()))*sin(2.0*M_PI*Uniform()); //gauss random number
    return y;
  }
}%

ss her_efficiency {

  /*--- Initialization ---*/
  state init {
    when ()
    {
      pvGet(X0);
      pvGet(X1);

      printf("her_efficiency initialization done.\n");

      %{
        init_genrand((unsigned)time(NULL));
      }%
    }
    state efficiency
  }

  /*--- Efficiency ---*/
  state efficiency {
    when ()
    {
      x0 = X0;
      x1 = X1;

      %{
	y = pow(X1 - 5.1/(4.*pow(M_PI,2.)) * pow(X0,2.) + 5./M_PI * X0 - 6., 2.) + 10 * (1. - 1./(8.*M_PI)) * cos(X0) + 10. 
  + rand_Lnormal(0., 1.e-3);
      }%

      Y0 = 200 - y;
      pvPut(Y0);

      %{
	usleep(100000);
      }%
    }
    state efficiency
  }
}

ss her_lm {

  /*--- Initialization ---*/
  state init {
    when ()
    {
      printf("her_lm initialization done.\n");
    }
    state lm
  }

  /*--- LM ---*/
  state lm {
    when ()
    {
      G0 = rand_Lnormal(1.e-1, 3.e-2);
      if (G0 < 8.e-2)
	{
	  C0 = 0.;
	  G0 = 0.;
	}
      else
	{
	  C0 = 1.-exp(-pow(x0-M_PI, 2.)/10.-pow(x1-2.275, 2.)/10.) + rand_Lnormal(1.e-2, 1.e-2);
	  G0 = 1.;
	}

      pvPut(C0);
      pvPut(G0);

      %{
	usleep(500000);
      }%
    }
    state lm
  }
}
